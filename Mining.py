import time
import random
import logging
from datetime import datetime
from zoneinfo import ZoneInfo
from utils import format_number

logger = logging.getLogger('MiningSystem')

class MiningSystem:
    FARM_TYPES = {
        'AORUS': {'price': 20_000_000, 'income': 1.0},
        'PALIT': {'price': 60_000_000, 'income': 3.0},
        'ASUS': {'price': 100_000_000, 'income': 5.0}
    }

    MIN_BTC_RATE = 50_000
    HOUR_IN_SECONDS = 3600
    MAX_FARMS_PER_TYPE = 1_000_000  # 1–∫–∫

    def __init__(self, casino):
        self.btc_rate = 80_000
        self.last_btc_update = time.time()
        self.next_btc_update = self.last_btc_update + self.HOUR_IN_SECONDS
        self.user_farms = {}
        self.casino = casino

    def get_hourly_income(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—á–∞—Å–æ–≤–æ–π –¥–æ—Ö–æ–¥ —Å —É—á–µ—Ç–æ–º 30% VIP-–±–æ–Ω—É—Å–∞"""
        if not self.user_farms.get(user_id):
            return 0.0

        total_income = sum(
            self.FARM_TYPES[farm['type']]['income']
            for farm in self.user_farms[user_id]
        )

        return total_income * 1.3 if self.casino.is_vip_active(user_id) else total_income

    def update_btc_rate(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å BTC –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        current_time = time.time()
        try:
            if current_time >= self.next_btc_update:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å
                change_percent = random.uniform(-0.05, 0.05)
                new_rate = int(self.btc_rate * (1 + change_percent))
                self.btc_rate = max(new_rate, self.MIN_BTC_RATE)
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
                self.last_btc_update = current_time
                self.next_btc_update = current_time + self.HOUR_IN_SECONDS
                # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                moscow_time = datetime.now(ZoneInfo('Europe/Moscow')).strftime("%H:%M")
                logger.info(f"[–ö—É—Ä—Å BTC] –û–±–Ω–æ–≤–ª–µ–Ω: {self.btc_rate} ‚ÇΩ ({moscow_time} –ú–°–ö)")
                return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ BTC: {str(e)}")
            return False

    def get_btc_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫—É—Ä—Å–µ BTC –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        current_time = time.time()

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
        moscow_tz = ZoneInfo('Europe/Moscow')

        last_update_time = datetime.fromtimestamp(self.last_btc_update, moscow_tz)
        next_update_time = datetime.fromtimestamp(self.next_btc_update, moscow_tz)

        last_update_str = last_update_time.strftime("%H:%M")
        next_update_str = next_update_time.strftime("%H:%M")

        # –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
        minutes_until_update = max(0, int((self.next_btc_update - current_time) / 60))

        return {
            'rate': self.btc_rate,
            'last_update': last_update_str,
            'next_update': next_update_str,
            'minutes_until_update': minutes_until_update
        }
    @property
    def farms(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø—ã —Ñ–µ—Ä–º"""
        return self.FARM_TYPES

    def auto_collect_btc(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä BTC (–∑–∞–≥–ª—É—à–∫–∞)"""
        pass

    def collect_btc(self, user_id):
        """–°–æ–±–∏—Ä–∞–µ—Ç BTC –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º VIP-—Å—Ç–∞—Ç—É—Å–∞"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–µ—Ä–º
        if user_id not in self.user_farms or not self.user_farms[user_id]:
            return 0

        total_btc = 0
        current_time = time.time()
        is_vip = self.casino.is_vip_active(user_id)  # Check VIP status

        for farm in self.user_farms[user_id]:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∫—É —Å–±–æ—Ä–∞, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if 'last_collect' not in farm:
                farm['last_collect'] = current_time
                continue

            # –†–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ BTC
            time_diff = current_time - farm['last_collect']
            hours_passed = int(time_diff // self.HOUR_IN_SECONDS)

            if hours_passed >= 1:
                farm_income = self.FARM_TYPES[farm['type']]['income']

                # Apply VIP bonus if active
                if is_vip:
                    farm_income *= 1.3  # Apply 30% bonus

                btc_earned = hours_passed * farm_income
                total_btc += btc_earned
                farm['last_collect'] += hours_passed * self.HOUR_IN_SECONDS

        return int(total_btc)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ

    def buy_farm(self, user_id, farm_type, quantity):
        """–ü–æ–∫—É–ø–∞–µ—Ç —Ñ–µ—Ä–º—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        try:
            quantity = int(quantity)
            farm_type = farm_type.upper()

            if farm_type not in self.FARM_TYPES:
                raise ValueError("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–µ—Ä–º–∞")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ñ–µ—Ä–º –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
            current_farms = sum(1 for farm in self.user_farms.get(user_id, []) if farm['type'] == farm_type)
            if current_farms + quantity > self.MAX_FARMS_PER_TYPE:
                raise ValueError(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ñ–µ—Ä–º –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ ({format_number(self.MAX_FARMS_PER_TYPE)} —à—Ç.)")

            farm_price = self.FARM_TYPES[farm_type]['price']
            total_price = farm_price * quantity

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            current_balance = self.casino.get_balance(user_id)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            if current_balance < total_price:
                return False, (
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n"
                    f"–ù—É–∂–Ω–æ: {format_number(total_price)} ‚ÇΩ\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: {format_number(current_balance)} ‚ÇΩ"
                )

            # –°–æ–∑–¥–∞–µ–º —Ñ–µ—Ä–º—ã
            new_farms = [{'type': farm_type, 'last_collect': time.time()} for _ in range(quantity)]
            if user_id not in self.user_farms:
                self.user_farms[user_id] = []
            self.user_farms[user_id].extend(new_farms)

            # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
            self.casino.withdraw(user_id, total_price)

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
            updated_balance = self.casino.get_balance(user_id)

            return True, (
                f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {quantity} —Ñ–µ—Ä–º {farm_type} –∑–∞ {format_number(total_price)} ‚ÇΩ\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {format_number(updated_balance)} ‚ÇΩ"
            )
        except Exception as e:
            return False, str(e)

    def sell_farm(self, user_id, farm_type, quantity):
        """–ü—Ä–æ–¥–∞–µ—Ç —Ñ–µ—Ä–º—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º 75% —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
        try:
            quantity = int(quantity)
            farm_type = farm_type.upper()

            if farm_type not in self.FARM_TYPES:
                raise ValueError("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–µ—Ä–º–∞")

            user_farms = self.user_farms.get(user_id, [])
            if not user_farms:
                raise ValueError("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–µ—Ä–º—ã –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞
            target_farms = [f for f in user_farms if f['type'] == farm_type]
            if len(target_farms) < quantity:
                raise ValueError(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–µ—Ä–º {farm_type} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")

            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ñ–µ—Ä–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ–¥–∞—é—Ç—Å—è
            farms_to_keep = [f for f in user_farms if f['type'] != farm_type]
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–µ—Ä–º—ã –ø—Ä–æ–¥–∞–≤–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞ (–ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏)
            farms_to_keep += target_farms[quantity:]  # –í—Å–µ, –∫—Ä–æ–º–µ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö quantity

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–µ—Ä–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_farms[user_id] = farms_to_keep

            original_price = self.FARM_TYPES[farm_type]['price']
            refund = int(original_price * quantity * 0.75)
            self.casino.deposit(user_id, refund)

            return True, (
                f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ {quantity} —Ñ–µ—Ä–º {farm_type}.\n"
                f"üíµ –ü–æ–ª—É—á–µ–Ω–æ: {format_number(refund)} ‚ÇΩ\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {format_number(self.casino.get_balance(user_id))} ‚ÇΩ"
            )

        except Exception as e:
            return False, str(e)



    def get_farm_counts(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–µ—Ä–º –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞"""
        counts = {'AORUS': 0, 'PALIT': 0, 'ASUS': 0}

        if user_id in self.user_farms:
            for farm in self.user_farms[user_id]:
                counts[farm['type']] += 1

        return counts