import os
import time
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitor_logger = logging.getLogger('monitoring')
monitor_logger.setLevel(logging.WARNING)  # –ü–æ–Ω–∏–∂–∞–µ–º –¥–æ WARNING –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏

# –§–æ—Ä–º–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
formatter = logging.Formatter(
    "%(asctime)s - %(levelname)s - %(message)s",
    "%Y-%m-%d %H:%M:%S"
)

# –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º)
log_dir = os.path.expanduser("~/bot_logs")
os.makedirs(log_dir, exist_ok=True)
file_handler = logging.FileHandler(
    os.path.join(log_dir, "monitor.log"),
    encoding='utf-8'
)
file_handler.setFormatter(formatter)
monitor_logger.addHandler(file_handler)


class BotMonitor:
    """–õ–µ–≥–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""

    def __init__(self, casino, mining, business):
        self.casino = casino
        self.mining = mining
        self.business = business
        self.start_time = time.time()
        self.last_save_time = None
        self.last_save_result = None

        # –í—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        self.check_systems()
        monitor_logger.info("–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def record_save_event(self, success, save_time=None):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        self.last_save_time = save_time or time.time()
        self.last_save_result = success
        monitor_logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {'—É—Å–ø–µ—à–Ω–æ' if success else '–æ—à–∏–±–∫–∞'}")

    def check_systems(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –±–æ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        results = {
            'casino': True,
            'mining': True,
            'business': True,
            'saving': True,
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Casino
        try:
            assert hasattr(self.casino, 'balances')
            assert isinstance(self.casino.balances, dict)
        except Exception:
            results['casino'] = False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Mining
        try:
            assert hasattr(self.mining, 'btc_rate')
            assert isinstance(self.mining.btc_rate, (int, float))
        except Exception:
            results['mining'] = False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Business
        try:
            assert hasattr(self.business, 'user_businesses')
            assert isinstance(self.business.user_businesses, dict)
        except Exception:
            results['business'] = False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
        try:
            save_dir_exists = os.path.exists(os.path.expanduser("~/bot_data"))
            save_file_exists = os.path.exists(os.path.expanduser("~/bot_data/user_data.zlib"))
            results['saving'] = save_dir_exists and save_file_exists
        except Exception:
            results['saving'] = False

        return results

    def get_save_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏ —Ñ–∞–π–ª–∞—Ö –¥–∞–Ω–Ω—ã—Ö"""
        info = {}

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
        save_dir = os.path.expanduser("~/bot_data")
        save_file = os.path.join(save_dir, "user_data.zlib")
        backup_dir = os.path.join(save_dir, "backups")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        info['save_dir_exists'] = os.path.exists(save_dir)
        info['backup_dir_exists'] = os.path.exists(backup_dir)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if info['save_dir_exists'] and os.path.exists(save_file):
            info['save_file_size'] = os.path.getsize(save_file) / 1024  # KB
            info['save_file_time'] = datetime.fromtimestamp(
                os.path.getmtime(save_file)
            ).strftime('%Y-%m-%d %H:%M:%S')
        else:
            info['save_file_size'] = 0
            info['save_file_time'] = "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏—è—Ö
        if info['backup_dir_exists']:
            backup_files = [f for f in os.listdir(backup_dir)
                            if f.startswith("backup_") and f.endswith(".zlib")]
            info['backup_count'] = len(backup_files)

            if backup_files:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
                backup_files.sort(reverse=True)
                latest_backup = os.path.join(backup_dir, backup_files[0])
                info['latest_backup_time'] = datetime.fromtimestamp(
                    os.path.getmtime(latest_backup)
                ).strftime('%Y-%m-%d %H:%M:%S')
                info['latest_backup_size'] = os.path.getsize(latest_backup) / 1024  # KB
            else:
                info['latest_backup_time'] = "–ù–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"
                info['latest_backup_size'] = 0
        else:
            info['backup_count'] = 0
            info['latest_backup_time'] = "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            info['latest_backup_size'] = 0

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if self.last_save_time:
            info['last_save_time'] = datetime.fromtimestamp(
                self.last_save_time
            ).strftime('%Y-%m-%d %H:%M:%S')
            info['last_save_result'] = "–£—Å–ø–µ—à–Ω–æ" if self.last_save_result else "–û—à–∏–±–∫–∞"
        else:
            info['last_save_time'] = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            info['last_save_result'] = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        return info

    def get_monitoring_report(self):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        uptime = time.time() - self.start_time
        uptime_hours = int(uptime // 3600)
        uptime_minutes = int((uptime % 3600) // 60)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—ã
        system_status = self.check_systems()
        status_icons = {True: "‚úÖ", False: "‚ùå"}

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è—Ö
        save_info = self.get_save_info()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ –æ—Ç—á–µ—Ç–∞
        report_lines = [
            f"\n*üõ† –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç–∞:*",
            f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_hours} —á {uptime_minutes} –º–∏–Ω",
            f"",
            f"*–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º:*",
            f"üí∞ –ö–∞–∑–∏–Ω–æ: {status_icons[system_status['casino']]}",
            f"‚õè –ú–∞–π–Ω–∏–Ω–≥: {status_icons[system_status['mining']]}",
            f"üíº –ë–∏–∑–Ω–µ—Å: {status_icons[system_status['business']]}",
            f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {status_icons[system_status['saving']]}",
            f"",
            f"*–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:*",
            f"üìÑ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {save_info['save_file_size']:.1f} KB (–∏–∑–º–µ–Ω–µ–Ω {save_info['save_file_time']})",
            f"üìë –†–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {save_info['backup_count']}",
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if save_info['backup_count'] > 0:
            report_lines.append(
                f"üìé –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ø–∏—è: {save_info['latest_backup_size']:.1f} KB (—Å–æ–∑–¥–∞–Ω–∞ {save_info['latest_backup_time']})")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        report_lines.append(f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {save_info['last_save_time']} ({save_info['last_save_result']})")

        return "\n".join(report_lines)


# –ü–∞—Ç—á –¥–ª—è SaveManager –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
def patch_save_manager(save_manager_class, monitor):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –≤ SaveManager"""
    original_save_data = save_manager_class.save_data

    @classmethod
    def save_data_with_monitoring(cls, casino, mining, business=None):
        start_time = time.time()
        result = original_save_data(casino, mining, business)
        monitor.record_save_event(result, start_time)
        return result

    save_manager_class.save_data = save_data_with_monitoring