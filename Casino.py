from utils import format_number
import random
import time
from datetime import datetime
from zoneinfo import ZoneInfo
import logging


class CasinoSystem:
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–ª–∞—Å—Å–∞
    START_BALANCE = 50_000_000
    MIN_BET = 100
    WIN_CHANCE = 0.35
    VIP_PRICE_PER_DAY = 100_000_000  # 100 –º–ª–Ω ‚ÇΩ –∑–∞ 1 –¥–µ–Ω—å
    MAX_BALANCE = 100_000_000_000_000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (100 —Ç—Ä–∏–ª–ª–∏–æ–Ω–æ–≤)
    vip_users = {}
    VIP_WIN_BOOST = 0.15

    def __init__(self):
        self.balances = {}
        self.used_promocodes = {}
        self.vip_users = {}
        self.registration_dates = {}
        self.last_bonus_claim = {}

    def get_top_players(self, limit=15):
        """
        Returns a list of top players sorted by balance.
        Only includes players with balances greater than 0.
        """
        # Filter players with balances greater than 0
        players_with_balances = [(user_id, self.get_balance(user_id))
                                 for user_id in self.balances
                                 if self.get_balance(user_id) > 0]

        # Sort by balance (descending)
        sorted_players = sorted(players_with_balances, key=lambda x: x[1], reverse=True)

        # Get top players
        top_players = sorted_players[:limit]

        # Add VIP status
        result = []
        for user_id, balance in top_players:
            is_vip = self.is_vip_active(user_id)
            result.append((user_id, {'balance': balance, 'is_vip': is_vip}))

        return result

    def get_balance(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.balances.get(user_id, self.START_BALANCE)

    def deposit(self, user_id, amount):
        """–ü–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞"""
        if not isinstance(amount, (int, float)) or amount <= 0:
            return False

        self.ensure_user_exists(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –±–∞–ª–∞–Ω—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
        current_balance = self.get_balance(user_id)
        new_balance = current_balance + amount

        if new_balance > self.MAX_BALANCE:
            # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            self.balances[user_id] = self.MAX_BALANCE
            return True

        self.balances[user_id] += amount
        return True

    def withdraw(self, user_id, amount):
        """–°–Ω–∏–º–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ —É—Ö–æ–¥–∞ –≤ –º–∏–Ω—É—Å)"""
        current_balance = self.get_balance(user_id)
        if current_balance < amount:
            raise ValueError("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è")
        self.balances[user_id] = current_balance - amount

    def ensure_user_exists(self, user_id):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if user_id not in self.balances:
            self.balances[user_id] = self.START_BALANCE
            self.registration_dates[user_id] = time.time()  # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

    def play_50_50(self, user_id, amount):
        base_chance = self.WIN_CHANCE
        if self.is_vip_active(user_id):
            base_chance += self.VIP_WIN_BOOST  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ VIP_WIN_BOOST –æ–±—ä—è–≤–ª–µ–Ω –≤ –∫–ª–∞—Å—Å–µ

        is_win = random.random() < base_chance

        if is_win:
            self.deposit(user_id, amount)
            return f"üèÜ –ü–æ–±–µ–¥–∞! +{format_number(amount)} ‚ÇΩ", True
        else:
            self.withdraw(user_id, amount)
            return f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à! -{format_number(amount)} ‚ÇΩ", False

    def buy_vip(self, user_id, days):
        """
        –ü–æ–∫—É–ø–∞–µ—Ç –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç VIP —Å—Ç–∞—Ç—É—Å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫: 30 –¥–Ω–µ–π
        """
        if days > 30:
            raise ValueError("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ VIP: 30 –¥–Ω–µ–π")

        now = datetime.now(ZoneInfo('Europe/Moscow')).timestamp()
        total_cost = days * self.VIP_PRICE_PER_DAY

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–ª–∞—Ç–∏—Ç—å
        if self.get_balance(user_id) < total_cost:
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –¢—Ä–µ–±—É–µ—Ç—Å—è: {format_number(total_cost)} ‚ÇΩ")

        # –°–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏
        self.withdraw(user_id, total_cost)

        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å VIP, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –µ–≥–æ
        if user_id in self.vip_users:
            current_expires = self.vip_users[user_id]
            # –ï—Å–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫, –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
            if current_expires < now:
                new_expires = now + (days * 24 * 3600)
            else:
                # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –∫ —Ç–µ–∫—É—â–µ–º—É —Å—Ä–æ–∫—É
                new_expires = current_expires + (days * 24 * 3600)
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ä–æ–∫
            new_expires = now + (days * 24 * 3600)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ VIP
        self.vip_users[user_id] = new_expires

        return new_expires

    def is_vip_active(self, user_id):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ VIP-—Å—Ç–∞—Ç—É—Å–∞"""
        try:
            expires = self.vip_users.get(user_id)
            if not expires:
                return False

            is_active = float(expires) > time.time()
            if not is_active:
                del self.vip_users[user_id]

            return is_active
        except:
            return False

    def get_vip_expires(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è VIP –∏–ª–∏ None"""
        vip_data = self.vip_users.get(user_id)
        if vip_data is None:
            return None

        # Handle both formats (direct timestamp or dict with 'expires' key)
        if isinstance(vip_data, dict):
            return vip_data.get("expires")
        else:
            # Assuming it's a float timestamp
            return vip_data
    def can_claim_bonus(self, user_id: int) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å"""
        now = time.time()
        last_claim = self.last_bonus_claim.get(user_id, 0)
        cooldown = 6 * 3600  # 6 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        if now - last_claim < cooldown:
            remaining = cooldown - (now - last_claim)
            hours = int(remaining // 3600)
            minutes = int((remaining % 3600) // 60)
            return False, f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑: {hours}—á {minutes}–º–∏–Ω"
        return True, "üéÅ –ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω!"

    def claim_vip_bonus(self, user_id: int) -> str:
        """–í—ã–¥–∞–µ—Ç VIP-–±–æ–Ω—É—Å"""
        can_claim, msg = self.can_claim_bonus(user_id)
        if not can_claim:
            return msg

        bonus = 10_000_000  # 10 –º–ª–Ω ‚ÇΩ
        self.deposit(user_id, bonus)
        self.last_bonus_claim[user_id] = time.time()
        return f"üéâ –ü–æ–ª—É—á–µ–Ω–æ +{format_number(bonus)} ‚ÇΩ (VIP-–±–æ–Ω—É—Å)"

    # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –≤ –º–µ—Ç–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏
    def get_vip_users(self):
        return self.vip_users

    def set_vip_users(self, vip_users):
        self.vip_users = vip_users

    def get_vip_expires(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è VIP –∏–ª–∏ None"""
        vip_data = self.vip_users.get(user_id)
        if vip_data is None:
            return None

        # Handle both formats (direct timestamp or dict with 'expires' key)
        if isinstance(vip_data, dict):
            return vip_data.get("expires")
        else:
            # Assuming it's a float timestamp
            return vip_data

    def is_vip_active(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ VIP-—Å—Ç–∞—Ç—É—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.vip_users:
            return False

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è VIP-—Å—Ç–∞—Ç—É—Å–∞
        vip_expires = self.vip_users.get(user_id)

        # Handle both formats
        if isinstance(vip_expires, dict):
            vip_expires = vip_expires.get('expires', 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        current_time = datetime.now(ZoneInfo('Europe/Moscow')).timestamp()
        return vip_expires > current_time

class RouletteSystem:
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–ª–∞—Å—Å–∞ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –¥–∞–Ω–Ω—ã–º
    BET_TYPES = {
        "0": {"numbers": {0}, "payout": 35},
        "–∫—Ä–∞—Å–Ω—ã–π": {"numbers": {1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36}, "payout": 1.95},
        "—á–µ—Ä–Ω—ã–π": {"numbers": {2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35}, "payout": 1.95},
        "1-12": {"numbers": set(range(1, 13)), "payout": 2.8},
        "13-24": {"numbers": set(range(13, 25)), "payout": 2.8},
        "25-36": {"numbers": set(range(25, 37)), "payout": 2.8}
    }
    LOSS_PROBABILITY = 0.12
    VIP_LOSS_REDUCTION = 0.05

    @staticmethod
    def spin():
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏"""
        return random.randint(0, 36)

    @staticmethod
    def check_win(bet_type, result, is_vip=False):
        loss_prob = RouletteSystem.LOSS_PROBABILITY
        if is_vip:
            loss_prob -= RouletteSystem.VIP_LOSS_REDUCTION
        return (
                result in RouletteSystem.BET_TYPES[bet_type]["numbers"] and
                random.random() > loss_prob
        )


class Casino:
    def withdraw(self, user_id, amount):
        if user_id not in self.users:
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        if self.users[user_id]['balance'] < amount:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        self.users[user_id]['balance'] -= amount