import time
import logging
from telebot import types
import math
logger = logging.getLogger('BusinessSystem')

class BusinessSystem:
    BUSINESS_TYPES = {
        '–°–ï–†–í–ï–†_MINECRAFT': {'price': 150_000, 'income': 15_000, 'emoji': 'üå≥'},
        '–ó–ê–ë–ï–ì–ê–õ–û–í–ö–ê': {'price': 1_000_000, 'income': 40_000, 'emoji': 'üçî'},
        '–ê–ü–¢–ï–ö–ê': {'price': 5_000_000, 'income': 80_000, 'emoji': 'üíä'},
        '–•–ê–ô–ü–û–í–´–ô_–ü–ê–ë–õ–ò–ö': {'price': 20_000_000, 'income': 110_000, 'emoji': 'üê¨'},
        '–†–´–ù–û–ö_–°_–û–î–ï–ñ–î–û–ô': {'price': 50_000_000, 'income': 160_000, 'emoji': 'üëï'},
        '–°–ê–£–ù–ê': {'price': 100_000_000, 'income': 165_000, 'emoji': 'üî•'},
        '–ö–ê–õ–¨–Ø–ù–ù–ê–Ø': {'price': 250_000_000, 'income': 375_000, 'emoji': 'üí®'},
        '–ó–ê–í–û–î_–í_–ì–ê–†–ê–ñ–ï': {'price': 500_000_000, 'income': 600_000, 'emoji': 'üî®'},
        '–°–ê–ô–¢_–°_–ö–ï–ô–°–ê–ú–ò': {'price': 1_000_000_000, 'income': 2_000_000, 'emoji': 'üé∞'},
        '–ê–ù–ò–ú–ê–¶–ò–û–ù–ù–ê–Ø_–°–¢–£–î–ò–Ø': {'price': 5_000_000_000, 'income': 5_000_000, 'emoji': 'üí°'},
        '–°–¢–†–ê–•–û–í–ê–Ø_–ö–û–ú–ü–ê–ù–ò–Ø': {'price': 15_000_000_000, 'income': 10_000_000, 'emoji': 'üìù'},
        'TESLA': {'price': 100_000_000_000, 'income': 60_000_000, 'emoji': 'üöÄ'}
    }

    BUSINESS_NAMES = {
        '–°–ï–†–í–ï–†_MINECRAFT': '–°–µ—Ä–≤–µ—Ä Minecraft',
        '–ó–ê–ë–ï–ì–ê–õ–û–í–ö–ê': '–ó–∞–±–µ–≥–∞–ª–æ–≤–∫–∞',
        '–ê–ü–¢–ï–ö–ê': '–ê–ø—Ç–µ–∫–∞',
        '–•–ê–ô–ü–û–í–´–ô_–ü–ê–ë–õ–ò–ö': '–•–∞–π–ø–æ–≤—ã–π –ø–∞–±–ª–∏–∫',
        '–†–´–ù–û–ö_–°_–û–î–ï–ñ–î–û–ô': '–†—ã–Ω–æ–∫ —Å –æ–¥–µ–∂–¥–æ–π',
        '–°–ê–£–ù–ê': '–°–∞—É–Ω–∞',
        '–ö–ê–õ–¨–Ø–ù–ù–ê–Ø': '–ö–∞–ª—å—è–Ω–Ω–∞—è',
        '–ó–ê–í–û–î_–í_–ì–ê–†–ê–ñ–ï': '–ó–∞–≤–æ–¥ –≤ –≥–∞—Ä–∞–∂–µ',
        '–°–ê–ô–¢_–°_–ö–ï–ô–°–ê–ú–ò': '–°–∞–π—Ç —Å –∫–µ–π—Å–∞–º–∏',
        '–ê–ù–ò–ú–ê–¶–ò–û–ù–ù–ê–Ø_–°–¢–£–î–ò–Ø': '–ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—É–¥–∏—è',
        '–°–¢–†–ê–•–û–í–ê–Ø_–ö–û–ú–ü–ê–ù–ò–Ø': '–°—Ç—Ä–∞—Ö–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
        'TESLA': 'Tesla'
    }

    MINUTE_IN_SECONDS = 60
    HOUR_IN_SECONDS = 3600
    MAX_BUSINESSES_PER_TYPE = 1  # –¢–æ–ª—å–∫–æ 1 –±–∏–∑–Ω–µ—Å –≤–æ–æ–±—â–µ

    def __init__(self, casino):
        self.user_businesses = {}
        self.casino = casino

    def format_full_balance(self, price):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∞–ª–∞–Ω—Å —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤: –º–ª–Ω, –º–ª—Ä–¥)"""
        return f"{int(price):,}".replace(",", ".")
    def get_hourly_income(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—á–∞—Å–æ–≤–æ–π –¥–æ—Ö–æ–¥ —Å —É—á–µ—Ç–æ–º 30% VIP-–±–æ–Ω—É—Å–∞"""
        if not self.user_businesses.get(user_id):
            return 0

        # –°–Ω–∞—á–∞–ª–∞ —Å—á–∏—Ç–∞–µ–º –±–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥ (–±–µ–∑ VIP)
        total_income = sum(
            self.BUSINESS_TYPES[business['type']]['income']
            for business in self.user_businesses[user_id]
        )

        # –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º VIP-–±–æ–Ω—É—Å, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
        if self.casino.is_vip_active(user_id):
            total_income *= 1.3  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 30%

        return total_income

    def get_minute_income(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Ö–æ–¥ –≤ –º–∏–Ω—É—Ç—É —Å —É—á–µ—Ç–æ–º 30% VIP-–±–æ–Ω—É—Å–∞"""
        hourly_income = self.get_hourly_income(user_id)
        return hourly_income / 60

    def collect_income(self, user_id):
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–æ—Ö–æ–¥ –æ—Ç –≤—Å–µ—Ö –±–∏–∑–Ω–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_businesses or not self.user_businesses[user_id]:
            return 0, 0

        total_income = 0
        current_time = time.time()
        is_vip = self.casino.is_vip_active(user_id)

        for business in self.user_businesses[user_id]:
            time_diff = current_time - business.get('last_collect', current_time)
            minutes_passed = time_diff // self.MINUTE_IN_SECONDS

            if minutes_passed >= 1:
                # –ë–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥ –≤ –º–∏–Ω—É—Ç—É (–±–µ–∑ VIP)
                minute_income = self.BUSINESS_TYPES[business['type']]['income'] / 60

                # –ü—Ä–∏–º–µ–Ω—è–µ–º VIP-–±–æ–Ω—É—Å
                if is_vip:
                    minute_income *= 1.3  # 30% –±–æ–Ω—É—Å

                income_earned = int(minutes_passed * minute_income)

                if 'balance' not in business:
                    business['balance'] = 0
                business['balance'] += income_earned

                business['last_collect'] = current_time
                total_income += income_earned

        total_balance = sum(business.get('balance', 0) for business in self.user_businesses[user_id])
        return total_income, total_balance

    def withdraw_business_funds(self, user_id, business_type=None):
        """–°–Ω–∏–º–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –±–∏–∑–Ω–µ—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        if user_id not in self.user_businesses or not self.user_businesses[user_id]:
            return 0

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å
        original_balance = self.casino.get_balance(user_id)

        # –°–±–æ—Ä –ø—Ä–∏–±—ã–ª–∏
        self.collect_income(user_id)

        total_balance = sum(
            business.get('balance', 0)
            for business in self.user_businesses[user_id]
            if not business_type or business['type'] == business_type
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if total_balance > 0:
            max_deposit = self.casino.MAX_BALANCE - original_balance
            if total_balance > max_deposit:
                total_balance = max_deposit

            self.casino.deposit(user_id, total_balance)

            # –û–±–Ω—É–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
            for business in self.user_businesses[user_id]:
                if not business_type or business['type'] == business_type:
                    business['balance'] = 0

            return total_balance

        return 0

    def format_price_with_prefix(self, price):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º (–º–ª–Ω, –º–ª—Ä–¥ –∏ —Ç.–¥.) —Å –æ–¥–Ω–∏–º –∑–Ω–∞–∫–æ–º –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        if price >= 1_000_000_000_000:  # —Ç—Ä–∏–ª–ª–∏–æ–Ω
            formatted = price / 1_000_000_000_000
            if formatted == int(formatted):  # –µ—Å–ª–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                return f"{int(formatted)} —Ç—Ä–ª–Ω"
            else:
                return f"{formatted:.1f} —Ç—Ä–ª–Ω"
        elif price >= 1_000_000_000:  # –º–∏–ª–ª–∏–∞—Ä–¥
            formatted = price / 1_000_000_000
            if formatted == int(formatted):  # –µ—Å–ª–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                return f"{int(formatted)} –º–ª—Ä–¥"
            else:
                return f"{formatted:.1f} –º–ª—Ä–¥"
        elif price >= 1_000_000:  # –º–∏–ª–ª–∏–æ–Ω
            formatted = price / 1_000_000
            if formatted == int(formatted):  # –µ—Å–ª–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                return f"{int(formatted)} –º–ª–Ω"
            else:
                return f"{formatted:.1f} –º–ª–Ω"
        elif price >= 1_000:  # —Ç—ã—Å—è—á–∞
            formatted = price / 1_000
            if formatted == int(formatted):  # –µ—Å–ª–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                return f"{int(formatted)} —Ç—ã—Å"
            else:
                return f"{formatted:.1f} —Ç—ã—Å"
        else:
            return f"{int(price)}"

    def buy_business(self, user_id, business_type):
        """–ü–æ–∫—É–ø–∞–µ—Ç –±–∏–∑–Ω–µ—Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        try:
            business_type = business_type.upper().replace(' ', '_')
            if business_type not in self.BUSINESS_TYPES:
                raise ValueError(f"‚ùå –ë–∏–∑–Ω–µ—Å {business_type} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            user_businesses = self.user_businesses.get(user_id, [])
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–∑–Ω–µ—Å–æ–≤ - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–æ–æ–±—â–µ
            if len(user_businesses) > 0:
                current_business = user_businesses[0]['type']
                business_name = self.BUSINESS_NAMES.get(current_business, current_business)
                emoji = self.BUSINESS_TYPES[current_business]['emoji']
                return False, (
                    f"‚ùå {user_id}, —É –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –±–∏–∑–Ω–µ—Å ¬´{business_name}¬ª {emoji}\n\n"
                    f"üõç –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –±–∏–∑–Ω–µ—Å, –ø—Ä–æ–¥–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–π –∫–æ–º–∞–Ω–¥–æ–π: –ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å"
                )
            business_price = self.BUSINESS_TYPES[business_type]['price']
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é format_number
            format_number = lambda n: f"{n:,}".replace(",", ".")
            if self.casino.get_balance(user_id) < business_price:
                return False, (
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n"
                    f"–ù—É–∂–Ω–æ: {format_number(business_price)} ‚ÇΩ\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: {format_number(self.casino.get_balance(user_id))} ‚ÇΩ"
                )
            new_business = {'type': business_type, 'last_collect': time.time(), 'balance': 0}
            if user_id not in self.user_businesses:
                self.user_businesses[user_id] = []
            self.user_businesses[user_id] = [new_business]  # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ –Ω–æ–≤—ã–π –±–∏–∑–Ω–µ—Å
            self.casino.withdraw(user_id, business_price)
            updated_balance = self.casino.get_balance(user_id)
            business_name = self.BUSINESS_NAMES.get(business_type, business_type)
            hour_income = self.BUSINESS_TYPES[business_type]['income']
            minute_income = hour_income / 60
            emoji = self.BUSINESS_TYPES[business_type]['emoji']
            return True, (
                f"‚úÖ –ö—É–ø–ª–µ–Ω –±–∏–∑–Ω–µ—Å {emoji} {business_name} –∑–∞ {format_number(business_price)} ‚ÇΩ\n"
                f"üí∞ –î–æ—Ö–æ–¥: {format_number(minute_income)} ‚ÇΩ/–º–∏–Ω ({format_number(hour_income)} ‚ÇΩ/—á–∞—Å)\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {format_number(updated_balance)} ‚ÇΩ"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±–∏–∑–Ω–µ—Å–∞: {e}")
            return False, str(e)

    def sell_business(self, user_id, business_type=None):
        """–ü—Ä–æ–¥–∞–µ—Ç –±–∏–∑–Ω–µ—Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º 75% —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞, –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω
            if not business_type:
                if not self.user_businesses.get(user_id):
                    raise ValueError("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
                business_type = self.user_businesses[user_id][0]['type']
            else:
                business_type = business_type.upper().replace(' ', '_')

            if business_type not in self.BUSINESS_TYPES:
                available = "\n".join([f"- {name}" for name in self.BUSINESS_NAMES.values()])
                raise ValueError(f"‚ùå –ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ:\n{available}")

            user_businesses = self.user_businesses.get(user_id, [])
            business_obj = next((b for b in user_businesses if b['type'] == business_type), None)
            if not business_obj:
                raise ValueError(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞ {self.BUSINESS_NAMES.get(business_type, business_type)}")

            self.collect_income(user_id)
            business_balance = business_obj.get('balance', 0)
            original_price = self.BUSINESS_TYPES[business_type]['price']
            refund = int(original_price * 0.75) + business_balance
            self.user_businesses[user_id] = [b for b in user_businesses if b['type'] != business_type]
            self.casino.deposit(user_id, refund)

            business_name = self.BUSINESS_NAMES.get(business_type, business_type)
            format_number = lambda n: f"{n:,}".replace(",", ".")
            return True, (
                f"‚úÖ –ü—Ä–æ–¥–∞–Ω –±–∏–∑–Ω–µ—Å {business_name}.\n"
                f"üíµ –ü–æ–ª—É—á–µ–Ω–æ: {format_number(refund)} ‚ÇΩ\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {format_number(self.casino.get_balance(user_id))} ‚ÇΩ"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –±–∏–∑–Ω–µ—Å–∞: {e}")
            return False, str(e)

    def get_business_counts(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–∑–Ω–µ—Å–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞"""
        if user_id not in self.user_businesses:
            return {}

        counts = {}
        for business in self.user_businesses[user_id]:
            business_type = business['type']
            counts[business_type] = counts.get(business_type, 0) + 1

        return counts

    def has_business(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∏–∑–Ω–µ—Å"""
        return user_id in self.user_businesses and len(self.user_businesses[user_id]) > 0

    # –í —Ñ–∞–π–ª–µ Business.py –≤ –º–µ—Ç–æ–¥–µ get_business_info

    def get_business_info(self, user_id, business_type=None):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è emoji"""
        try:
            if not self.has_business(user_id):
                return None

            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –±–∏–∑–Ω–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            business = self.user_businesses[user_id][0]
            actual_type = business['type']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
            business_data = self.BUSINESS_TYPES.get(actual_type, {})
            if not business_data:
                return None

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º get() —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è emoji
            return {
                'type': actual_type,
                'name': self.BUSINESS_NAMES.get(actual_type, actual_type),
                'price': business_data.get('price', 0),
                'income_hour': business_data.get('income', 0),
                'income_minute': business_data.get('income', 0) / 60,
                'emoji': business_data.get('emoji', 'üè¢'),  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π emoji
                'balance': business.get('balance', 0),
                'sell_price': int(business_data.get('price', 0) * 0.75)
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ get_business_info: {str(e)}")
            return None
    def _get_first_business_info(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º –±–∏–∑–Ω–µ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            business = self.user_businesses[user_id][0]
            business_type = business['type']
            return {
                'type': business_type,
                'name': self.BUSINESS_NAMES.get(business_type, business_type),
                # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
            }
        except:
            return None

    def get_business_details(self, user_id, business_type=None):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        if not self.has_business(user_id):
            return "–£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞.", None

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Ö–æ–¥—ã –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.collect_income(user_id)

        business_info = self.get_business_info(user_id, business_type)
        if not business_info:
            return "–£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞.", None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º VIP-—Å—Ç–∞—Ç—É—Å
        is_vip = self.casino.is_vip_active(user_id)
        vip_bonus = 1.3 if is_vip else 1.0
        vip_text = " (+30% VIP)" if is_vip else ""

        # –ü—Ä–∏–º–µ–Ω—è–µ–º VIP-–±–æ–Ω—É—Å –∫ –¥–æ—Ö–æ–¥–∞–º
        base_hour_income = business_info['income_hour']
        base_minute_income = business_info['income_minute']
        adjusted_hour_income = base_hour_income * vip_bonus
        adjusted_minute_income = base_minute_income * vip_bonus

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        price = self.format_price_with_prefix(business_info['price'])
        hour_income = self.format_price_with_prefix(int(adjusted_hour_income))
        minute_income = math.ceil(adjusted_minute_income / 10) * 10  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–µ—Å—è—Ç–∫–æ–≤

        formatted_minute = f"{minute_income:,}".replace(",", ".")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            f"*–í–∞—à –±–∏–∑–Ω–µ—Å:* {business_info['emoji']} {business_info['name']}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ\n"
            f"üìà –î–æ—Ö–æ–¥ –≤ –º–∏–Ω—É—Ç—É: {formatted_minute} ‚ÇΩ{vip_text}\n"
            f"üïí –î–æ—Ö–æ–¥ –≤ —á–∞—Å: {hour_income} ‚ÇΩ{vip_text}\n"
            f"üí∏ –ù–∞–∫–æ–ø–ª–µ–Ω–æ: {self.format_price_with_prefix(business_info['balance'])} ‚ÇΩ"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = self.create_business_keyboard(user_id)
        return text, markup
    def create_business_keyboard(self, user_id):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –±–∏–∑–Ω–µ—Å–∞"""
        markup = types.InlineKeyboardMarkup(row_width=1)
        if self.has_business(user_id):
            business_info = self.get_business_info(user_id)
            balance = self.format_price_with_prefix(business_info['balance'])

            # –ö–Ω–æ–ø–∫–∞ "–°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å" (—Ç–æ–ª—å–∫–æ —Å—É–º–º–∞)
            collect_button = types.InlineKeyboardButton(
                text=f"üí∞ –°–Ω—è—Ç—å {balance} ‚ÇΩ",
                callback_data=f"business_collect_{business_info['type']}"
            )
            sell_button = types.InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å",
                callback_data=f"confirm_sell_{business_info['type']}"
            )
            markup.add(collect_button, sell_button)
        else:
            buy_button = types.InlineKeyboardButton(
                text="üõí –ö—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å",
                callback_data="business_buy_menu"
            )
            markup.add(buy_button)
        return markup
    def create_business_purchase_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–∏–∑–Ω–µ—Å–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.InlineKeyboardMarkup(row_width=1)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å—ã –ø–æ —Ü–µ–Ω–µ
        sorted_businesses = sorted(
            self.BUSINESS_TYPES.items(),
            key=lambda x: x[1]['price']
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
        for business_type, business_info in sorted_businesses:
            emoji = business_info['emoji']
            name = self.BUSINESS_NAMES.get(business_type, business_type)
            price = self.format_price_with_prefix(business_info['price'])

            button = types.InlineKeyboardButton(
                text=f"{emoji} {name} - {price} ‚ÇΩ",
                callback_data=f"business_buy_{business_type}"
            )
            markup.add(button)

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        back_button = types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="business_menu"
        )
        markup.add(back_button)

        return markup

    def format_business_list(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å—ã –ø–æ —Ü–µ–Ω–µ
        sorted_businesses = sorted(
            self.BUSINESS_TYPES.items(),
            key=lambda x: x[1]['price']
        )

        text = "*üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤:*\n\n"

        for i, (business_type, business_info) in enumerate(sorted_businesses, 1):
            name = self.BUSINESS_NAMES.get(business_type, business_type)
            price = self.format_price_with_prefix(business_info['price'])
            income = self.format_price_with_prefix(business_info['income'])
            emoji = business_info['emoji']

            text += f"{i}. {emoji} *{name}*\n" \
                    f"   üí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ\n" \
                    f"   üíµ –î–æ—Ö–æ–¥: {income} ‚ÇΩ/—á–∞—Å\n\n"

        text += "\n_–î–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–∑–Ω–µ—Å–∞ –≤–≤–µ–¥–∏—Ç–µ:_ `/–±–∏–∑–Ω–µ—Å [–Ω–æ–º–µ—Ä]`\n" \
                "_–ù–∞–ø—Ä–∏–º–µ—Ä:_ `/–±–∏–∑–Ω–µ—Å 1`"

        return text

    def format_business_info(self, user_id):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ"""
        if not self.has_business(user_id):
            return "üíº –ë–∏–∑–Ω–µ—Å: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –±–∏–∑–Ω–µ—Å–∞
        self.collect_income(user_id)
        business_info = self.get_business_info(user_id)

        if not business_info:
            return "üíº –ë–∏–∑–Ω–µ—Å: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        business_name = self.BUSINESS_NAMES.get(business_info['type'], business_info['type'])
        emoji = self.BUSINESS_TYPES[business_info['type']]['emoji']
        hour_income = business_info['income_hour']
        minute_income = business_info['income_minute']

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å VIP –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
        vip_bonus = ""
        if self.casino.is_vip_active(user_id):
            hour_income *= 1.3
            minute_income *= 1.3
            vip_bonus = " (+30% VIP)"

        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ—Ö–æ–¥ –≤ –º–∏–Ω—É—Ç—É –≤–≤–µ—Ä—Ö –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –¥–µ—Å—è—Ç–∫–∞
        rounded_minute_income = math.ceil(minute_income / 10) * 10  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞
        format_number = lambda n: f"{n:,}".replace(",", ".")

        return (
            f"üíº –ë–∏–∑–Ω–µ—Å: {emoji} {business_name}\n"
            f"üìà –î–æ—Ö–æ–¥: {format_number(rounded_minute_income)} ‚ÇΩ/–º–∏–Ω{vip_bonus}\n"
            f"üí∞ –ù–∞–∫–æ–ø–ª–µ–Ω–æ: {format_number(business_info['balance'])} ‚ÇΩ"
        )