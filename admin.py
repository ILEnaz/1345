import os
import logging
import time
import pickle
import shutil
from datetime import datetime
from zoneinfo import ZoneInfo
from utils import format_number, resolve_user_id


class AdminPanel:
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –∫–æ–º–∞–Ω–¥
    ADMIN_COMMANDS = (
        "üõ† *–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:*\n"
        "üìã `/–∞–¥–º–∏–Ω` - –°–ø—Ä–∞–≤–∫–∞\n"
        "üìä `/–ª–æ–≥–∏ [N]` - –ü–æ—Å–ª–µ–¥–Ω–∏–µ N –ª–æ–≥–æ–≤\n"
        "üí∏ `/–≤—ã–¥–∞—Ç—å [ID] [–°—É–º–º–∞]` - –í—ã–¥–∞—á–∞ —Å—Ä–µ–¥—Å—Ç–≤\n"
        "üéü `/—Å–¥-–ø—Ä–æ–º–æ [–∫–æ–¥] [—Å—É–º–º–∞] [–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π]` - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "üë§ `/–∏–Ω—Ñ–æ [ID]` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n"
        "üíé `/—Å–µ—Ç-–≤–∏–ø [ID] [–¥–Ω–∏]` - –í—ã–¥–∞—Ç—å VIP-—Å—Ç–∞—Ç—É—Å\n"
        "üíé `/—É–±—Ä-–≤–∏–ø [ID]` - –£–±—Ä–∞—Ç—å VIP-—Å—Ç–∞—Ç—É—Å\n"
        "üí∞ `/—Å–µ—Ç-–∫—É—Ä—Å [–∫—É—Ä—Å]` - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å BTC\n"
        "üìä `/—Å—Ç–∞—Ç` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        "üì¢ `/—Å–æ–æ–±—â–µ–Ω–∏—è [—Å–æ–æ–±—â–µ–Ω–∏–µ]` - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º\n"
        "üì¢ `/—Å–æ–±-–ª–∏—á [ID] [—Å–æ–æ–±—â–µ–Ω–∏–µ]` - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "üíæ `/backup` - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é\n"
        "üíæ `/restore [backup_id]` - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫–æ–ø–∏–∏"
    )

    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
    _admin_ids = None

    @classmethod
    def _get_admins(cls):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –µ—Å–ª–∏ –æ–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω
        if cls._admin_ids is not None:
            return cls._admin_ids

        admins = os.getenv("ADMINS", "")
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å ID –≤ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
            cls._admin_ids = [int(a.strip()) for a in admins.split(",") if a.strip()]
            return cls._admin_ids
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤: {e}")
            cls._admin_ids = []
            return []

    @staticmethod
    def admin_give_money(casino_system, bot, admin_id, to_user_reference, amount):
        """
        –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –≤—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º resolve_user_id –∏–∑ utils
        # Check if the user is an admin
        if not AdminPanel.is_admin(admin_id):
            return False, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", None

        # Resolve the recipient ID
        success, result = resolve_user_id(bot, to_user_reference)
        if not success:
            return False, result, None  # This is the error message from resolve_user_id

        to_user_id = result

        try:
            # Ensure user exists
            casino_system.ensure_user_exists(to_user_id)

            # Give money with limit check
            if hasattr(casino_system, 'MAX_BALANCE') and amount > casino_system.MAX_BALANCE:
                return False, f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—ã–¥–∞—á–∏ ({format_number(casino_system.MAX_BALANCE)} ‚ÇΩ)", None
            casino_system.deposit(to_user_id, amount)

            # Get recipient's info for the message
            try:
                user = bot.get_chat(to_user_id)
                username = f"@{user.username}" if user.username else f"{user.first_name}"
            except:
                username = f"ID: {to_user_id}"

            return True, f"‚úÖ –í—ã–¥–∞–Ω–æ {format_number(amount)} ‚ÇΩ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}", to_user_id

        except Exception as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Å—Ä–µ–¥—Å—Ç–≤: {str(e)}", None

    @staticmethod
    def is_admin(user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in AdminPanel._get_admins()

    @staticmethod
    def get_logs(lines=10):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞"""
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Ä–∞–∑—É–º–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            lines = max(1, min(lines, 100))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ª–æ–≥–æ–≤
            if not os.path.exists('bot.log'):
                return "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω."

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ —Ñ–∞–π–ª
            if os.path.getsize('bot.log') == 0:
                return "–§–∞–π–ª –ª–æ–≥–æ–≤ –ø—É—Å—Ç."

            with open('bot.log', 'r', encoding='utf-8') as f:
                # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N
                log_lines = f.readlines()

                if not log_lines:
                    return "–§–∞–π–ª –ª–æ–≥–æ–≤ –ø—É—Å—Ç."

                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ lines —Å—Ç—Ä–æ–∫
                logs = log_lines[-lines:]

                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω—É
                result = "".join(logs)

                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ –ø—É—Å—Ç—ã–µ, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
                if not result.strip():
                    return "–§–∞–π–ª –ª–æ–≥–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏."

                return result
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}"

    @staticmethod
    def get_system_stats(casino_system, mining_system, business_system=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_users = len(casino_system.balances)

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
            active_users = 0
            for uid, balance in casino_system.balances.items():
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–ª–∞–Ω—Å –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –æ–Ω —Å—Ç—Ä–æ–∫–∞
                if isinstance(balance, str):
                    try:
                        balance_num = float(balance)
                    except (ValueError, TypeError):
                        balance_num = 0
                else:
                    balance_num = balance

                if balance_num > 0:
                    active_users += 1

            vip_users = sum(1 for uid in casino_system.vip_users if casino_system.is_vip_active(uid))

            # –≠–∫–æ–Ω–æ–º–∏–∫–∞ - –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —á–∏—Å–ª–∞
            total_balance = 0
            for balance in casino_system.balances.values():
                if isinstance(balance, str):
                    try:
                        balance_num = float(balance)
                    except (ValueError, TypeError):
                        balance_num = 0
                else:
                    balance_num = balance

                total_balance += balance_num

            avg_balance = total_balance / active_users if active_users > 0 else 0

            # –ú–∞–π–Ω–∏–Ω–≥
            total_farms = sum(len(farms) for farms in mining_system.user_farms.values())

            # –ë–∏–∑–Ω–µ—Å—ã (–µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –±–∏–∑–Ω–µ—Å–æ–≤ –ø–µ—Ä–µ–¥–∞–Ω–∞)
            total_businesses = 0
            if business_system is not None:
                total_businesses = sum(len(businesses) for businesses in business_system.user_businesses.values())
                businesses_info = f"\nüíº –í—Å–µ–≥–æ –±–∏–∑–Ω–µ—Å–æ–≤: `{total_businesses}`"
            else:
                businesses_info = ""

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            stats = (
                "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{total_users}`\n"
                f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{active_users}`\n"
                f"üíé VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{vip_users}`\n\n"
                f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: `{format_number(total_balance)} ‚ÇΩ`\n"
                f"üíµ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: `{format_number(avg_balance)} ‚ÇΩ`\n\n"
                f"‚õè –í—Å–µ–≥–æ —Ñ–µ—Ä–º: `{total_farms}`{businesses_info}\n"
                f"üí≤ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC: `{format_number(mining_system.btc_rate)} ‚ÇΩ`"
            )
            return stats
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"

    @staticmethod
    def create_backup(casino_system, mining_system, business_system=None):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é"""
        try:
            from saving import SaveManager

            # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            timestamp = datetime.now(ZoneInfo('Europe/Moscow')).strftime("%Y%m%d_%H%M%S")
            backup_path = os.path.join(SaveManager.BACKUP_DIR, f"admin_backup_{timestamp}.pkl")

            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            data = {
                'version': 2,
                'balances': casino_system.balances,
                'vip_users': casino_system.vip_users,
                'used_promocodes': casino_system.used_promocodes,
                'registration_dates': casino_system.registration_dates,
                'user_farms': mining_system.user_farms,
                'btc_rate': mining_system.btc_rate,
                'last_btc_update': mining_system.last_btc_update,
                'next_btc_update': mining_system.next_btc_update,
                'timestamp': time.time()
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–∏–∑–Ω–µ—Å–∞—Ö –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if business_system is not None:
                data['user_businesses'] = business_system.user_businesses

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(SaveManager.BACKUP_DIR, exist_ok=True)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            with open(backup_path, 'wb') as f:
                pickle.dump(data, f, protocol=pickle.HIGHEST_PROTOCOL)

            return True, f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: admin_backup_{timestamp}.pkl"
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}"

    @staticmethod
    def restore_backup(backup_id, casino_system, mining_system, business_system=None):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            from saving import SaveManager

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            backup_path = os.path.join(SaveManager.BACKUP_DIR, backup_id)
            if not os.path.exists(backup_path):
                return False, "‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            with open(backup_path, 'rb') as f:
                data = pickle.load(f)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            required_keys = [
                'version', 'balances', 'vip_users', 'used_promocodes',
                'registration_dates', 'user_farms', 'btc_rate'
            ]
            if not all(key in data for key in required_keys):
                return False, "‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            casino_system.balances = data.get('balances', {})
            casino_system.vip_users = data.get('vip_users', {})
            casino_system.used_promocodes = data.get('used_promocodes', {})
            casino_system.registration_dates = data.get('registration_dates', {})

            mining_system.user_farms = data.get('user_farms', {})
            mining_system.btc_rate = data.get('btc_rate', 80000)

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–∏–∑–Ω–µ—Å–∞—Ö –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞
            if business_system is not None and 'user_businesses' in data:
                business_system.user_businesses = data.get('user_businesses', {})

            # –¢–µ–∫—É—â–∏–µ timestamps –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è BTC
            mining_system.last_btc_update = time.time()
            mining_system.next_btc_update = mining_system.last_btc_update + mining_system.HOUR_IN_SECONDS

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if business_system is not None:
                SaveManager.save_data(casino_system, mining_system, business_system)
            else:
                SaveManager.save_data(casino_system, mining_system)

            return True, f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ {backup_id}"
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}"

    @staticmethod
    def list_backups():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        try:
            from saving import SaveManager

            if not os.path.exists(SaveManager.BACKUP_DIR):
                return []

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã .pkl –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±—ç–∫–∞–ø–æ–≤
            backups = [f for f in os.listdir(SaveManager.BACKUP_DIR) if f.endswith('.pkl')]
            return sorted(backups, reverse=True)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {e}")
            return []